/**
 * Licensed to Jasig under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Jasig licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a
 * copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


/*
 * *** SSP TRAINING SET STUDENT LOGIN/USER DATA INTO PLATFORM ***
 *
 * This SQL File sets user data into ssp-platform such that the entered students 
 * can login into the platform and use the MyGPS functionality.
 *
 * It adds into tables up_person_dir, up_person_attr and up_person_attr_values.
 *
 * To use this file substitute the placeholders below via some other script
 *  or manually with the required data for each user adding a select statement each time. 
 *  There is a function so you would create a select statment for each new user. 
 *
 *  SELECT addStudentUsersToPlatform('STUDENTUSERNAME','STUDENTPASSWORD', 'STUDENTFIRSTNAME', 'STUDENTLASTNAME');
 *
 * Substitute: 
 *	STUDENTUSERNAME = username of the new user to add (must be unique)
 *	STUDENTPASSWORD = password of the new user to add 
 *		(must be generated by portalPasswordGenerator or uPortal and be in the SHA or MD5 form)
 *	STUDENTFIRSTNAME = first name of the new user to add 
 *	STUDENTLASTNAME = last name of the new user to add       
 *
 * Note: Requires Postgres 8.4 or higher
 *
 */

--Function to Set Student Users into SSP-Platform for SSP Training

CREATE OR REPLACE FUNCTION addStudentUsersToPlatform(text, text, text, text) RETURNS void AS $$

DECLARE
  studentUserDirId bigint;
  studentUserUserId bigint;
  ifRecordExists boolean;    
  attributeRecord RECORD; 
  throwAwayInt bigint;

BEGIN
	--Delete can comment out for fresh database 
 	/* ifRecordExists = (SELECT EXISTS (SELECT count(*) FROM up_person_dir WHERE user_name = $1));
	
	 IF ifRecordExists IS TRUE THEN	   
	   FOR attributeRecord IN (SELECT id FROM up_person_attr WHERE user_dir_id = 
						(SELECT user_dir_id FROM up_person_dir WHERE user_name = $1)) LOOP
 		DELETE FROM up_person_attr_values WHERE attr_id = attributeRecord.id;		
	   END LOOP;
    	   DELETE FROM up_person_attr WHERE user_dir_id = (SELECT user_dir_id FROM up_person_dir WHERE user_name = $1);
           DELETE FROM up_person_dir WHERE user_name = $1;
	   DELETE FROM up_user WHERE user_name = $1;            
	 END IF;*/
	--End Delete  


	 studentUserDirId = (SELECT nextval('up_person_dir_seq'));	
	 studentUserUserId = (SELECT user_id FROM up_user ORDER BY user_id DESC LIMIT 1) + 1;


	 INSERT INTO up_person_dir(user_dir_id, entity_version, lst_pswd_cgh_dt, user_name, encrptd_pswd)
	 VALUES (studentUserDirId, '1', '2013-09-10 21:59:16.794', $1, $2);


	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_ACADEMIC_RESOURCE_CENTER', studentUserDirId);
 
         INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0'); 

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'SSP_ROLES', studentUserDirId);

         INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_SSP_STUDENT', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'sn', studentUserDirId);

	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_'||$4, '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_DISPLACED_WORKERS', studentUserDirId);

	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_FAST_FORWARD', studentUserDirId);

	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_DISABILITY', studentUserDirId);

	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'givenName', studentUserDirId);

  	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_'||$3, '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_INDIVIDUALIZED_LEARNING_PLAN', studentUserDirId);

 	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_EARLY_ALERT', studentUserDirId);

	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_ENGLISH_SECOND_LANGUAGE', studentUserDirId);

 	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');

	 INSERT INTO up_person_attr(id, entity_version, attr_name, user_dir_id)
	 VALUES ((SELECT nextval('up_person_attr_seq')), '0', 'DATA_COUNSELING_SERVICES', studentUserDirId);

	 INSERT INTO up_person_attr_values(attr_id, attr_value, value_order)
         VALUES ((SELECT currval('up_person_attr_seq')), '_FALSE', '0');	

	
	 INSERT INTO up_user(user_id, user_name, user_dflt_usr_id, user_dflt_lay_id, next_struct_id, 
            lst_chan_updt_dt)
    	 VALUES (studentUserUserId, $1, 10, 1, 4, null);

         --Increment the sequences / Fixes error in ssp-platform admin on add/edit a user after data load 
         throwAwayInt = (SELECT nextval('up_person_dir_seq'));
         throwAwayInt = (SELECT nextval('up_person_attr_seq'));	
END;

$$ LANGUAGE plpgsql;

-- End Function


--Begin Add Student User Section (You can edit below this line)
--   FORM: SELECT addStudentUsersToPlatform('STUDENTUSERNAME','STUDENTPASSWORD', 'STUDENTFIRSTNAME', 'STUDENTLASTNAME');

   SELECT addStudentUsersToPlatform('STUDENTUSERNAME','STUDENTPASSWORD','STUDENTFIRSTNAME', 'STUDENTLASTNAME');
  
--End Add Student Users to Platform Script
